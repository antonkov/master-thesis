%-*-coding: utf-8-*-
\chapter{Постановка задачи}
\label{chapSVD}

\section{Задача построения маршрута поиска в oбщeм случае}


\subsection{Расширения задачи коммивояжера}
В классической формулировке задача коммивояжера(traveling salesman problem, TSP) \cite{app07} звучит
 так:
 дан взвешенный граф, необходимо найти цикл минимального веса, посещающий все его вершины.
 Евклидова TSP --- частный случай TSP, когда весами ребер являются
расстояния на плоскости. 
 Задача построения маршрута поиска объекта на первый взгляд очень похожа на задачу коммивояжера.
Однако в реальности особенности задачи оказываются существенными:
\begin{itemize}
\item{Средство поиска в один момент времени посещает несколько вершин, а именно все вершины
попадающие в круг определенного радиуса с центром в его текущем положении.
Существует расширение TSP под названием GTSP \cite{ben03} или обобщенная задача коммивояжера,
которое решает следующую задачу:
дан взвешенный граф и разбиение его вершин на \textbf{не пересекающиеся} множества, необходимо
найти цикл минимального веса, посещающий хотя бы одну вершину из каждого множества.
Существует сведение данной задачи к TSP не увеличивающее размерности.
Но к сожалению данное расширение неприменимо к нашей задаче, так как множества могут пересекаться.}
\item{Зачастую все вершины посетить физически невозможно. 
Соответственно выделяют вершины в которых более вероятно обнаружить объект.
 Сопоставим вершине $v$ величину $p_v$ --- вероятность обнаружить объект в этой вершине.
 $p_{path}=\sum\limits_{v\in path}p_v$. На практике длина путей с $p_{path} \ge 0.99$ может превышать
длину путей с $p_{path} \ge 0.9$ в десятки раз. То есть длина пути может расти экспоненциально
в зависимости от $p_{path}$. Следовательно необходимым параметром задачи становится максимальная длина
пути (или время поиска с физической точки зрения). Известно обобщение Profit Based TSP \cite{dew13}:
каждой вершине сопоставляется значение $p_v$, при посещении вершины к сумме призов 
добавляется $(p_v-t_v)$, где $t_v$---время посещения, необходимо составить маршрут с
наибольшей суммой призов. К сожалению наша задача и здесь сравнительно более общая, так как
величины призов могут изменяться нелинейно.}
\item{Распределение $p_v$ может быть не статично по времени и изменяться согласно
заданной модели \cite{li06}. Следовательно время и расстояние не взаимозаменяемы в поставленной
задаче и
оптимальное значение $p_{path}$ может быть различно если мы фиксируем один из параметров.
В поставленной задаче будет фиксировано время. Однако все модели изменения обладают свойством:
распределение изменяется непрерывно, перераспределяясь не превышая фиксированную скорость,
не появляется извне и не исчезает (будем считать, что при посещении призы ``собираются'' и исчезают).
Соответственно $p_{v,t}=\sum_{pos(q_i,t)=v}q_i$, где $pos(q,t)$ --- функция, возвращающая местоположение
(вершину графа) приза $q$ в момент времени $t$. Приз $q_i$ в вершине $v$ мы можем собрать лишь в 
определенные промежутки времени. Обобщение Time Windows TSP \cite{lop13} решает соответствующую
задачу: вершину $v$ можно посетить лишь в промежуток $[t_{v,l}; t_{v,r}]$. Проблема сведения к
этому обобщению
в том, что значительно увеличивается количество вершин, а именно новая вершина будет
сопоставлена $j$-му моменту, когда приз $q_i$ оказался в вершине $v$.} 
\item{Другое обобщение для случая с движущимися вершинами --- Kinetic TSP \cite{ham99} или
Moving Targets TSP \cite{hel03}.
Это классическая Евклидова TSP, в которой вершины движутся в фиксированном направлении.
Однако в существующих работах были рассмотрены только случаи где вершины движутся с
фиксированной скоростью, или коммивояжер должны возвращаться в стартовую вершину
 после посещения каждой. В исходной
задаче скорость и направления перемещения призов могут изменяться. Кроме того сведение вновь
значительно увеличивает число вершин.}
\item{Фактически до текущего момента времени задача формулировалась в непрерывном случае.
При разработке алгоритма для ЭВМ необходимо провести некоторую дискретизацию.
Необходимое количество вершин для двумерной задачи растет с квадратичной скоростью и соответственно
приемлемое значение может достигать миллионов вершин. Такое количество вершин велико
даже для самых быстрых реализаций приближенных решений TSP.}
\item{В реальной жизни невозможно искать согласно произвольной траектории из-за технических
ограничений на передвижение поискового средства. Помимо этого недопустимо применение не
общепризнанных стратегий поиска.}
\end{itemize}

\FloatBarrier
\subsection{Распределение частиц}
Использование понятия распределение вероятности обнаружения противника в дальнейшем будет
не совсем удобно, так как одна из основных частей задачи ``сбор'' вероятности --- не является
корректной операцией над вероятностями.

Введем альтернативное понятие --- распределение ``частиц''.
Частица $\pi : \Pi$ --- гипотеза изначального расположения объекта и его поведения в дальнейшем.
Вес частицы $w_{\pi}$ --- вероятность осуществления именно этой гипотезы.
$pos(\pi, t)$ --- положение частицы $\pi$ в момент времени $t$.
Сумма весов всех частиц изначально равна единице. Расширение понятия веса частиц на непрерывный
 случай аналогично расширению для вероятностного пространства.
``Собрать частицу'' --- проверить гипотезу. После проверки частица исчезает и больше не может
быть собрана.
Распределение частиц $f(dS, t, path)$ --- функция, ставящая в соответствие области и
 времени сумму весов частиц находящихся в этой области в заданное время,
 с учетом частиц собранных средством поиска к данному моменту. 
С течением времени частицы могут перемещаться в любом направлении с ограниченной скоростью, однако
не могут появляться из ниоткуда или исчезать иным способом, кроме сбора их средством поиска.
Сумма собранных частиц фактически равна априорной вероятности обнаружить объект, имеющий заданное
начальное распределение вероятности и закон его изменения.

\FloatBarrier
\subsection{Формулировка задачи построения маршрута поиска 
в общем случае}
Задано распределение частиц $f(dS, t, path)$, $t_{search}$ --- время поиска
и параметры средства поиска: $pos_0$ --- начальная позиция, $r$ --- радиус обнаружения и 
$v_{max}$ --- максимальная скорость передвижения.
 Необходимо найти маршрут $path(t)$, определяющий
позицию средства поиска в любой момент времени и максимизирующий сумму весов собранных
частиц $sum_{res}$.
Более формально $sum_{res}=1-\int\limits_Sf(dS, t_{search}, path)$, $path(0)=pos_0$,
 $|path'(t)|\le v_{max}$, собраны те и только те частицы
 $\pi$ для которых $\exists \tau\le t_{search} ||pos(\pi, \tau)-path(\tau)|| \le r$. 
\FloatBarrier
\section{Задача построения маршрута поиска
 стратегией ``Параллельное галсирование''}

\subsection{Стратегии поиска}
Однако, помимо того, что решения общей задачи сложно найти, построенные маршруты могут быть
практически неприменимы из-за ограничений на передвижение средства поиска. В реальной жизни
поиск объектов осуществляется общепринятыми стратегиями, такими как ``заданный маршрут'',
``гребенка'', ``расширяющийся квадрат'',
``параллельное галсирование''(рис. \ref{strat:subfigures}).
\textbf{Галс} --- линия пути воздушного судна от поворота до поворота.
\begin{figure}[ht]
  \begin{center}
    \subfigure[``Гребенка'']{%
      \putImgx{0.4\textwidth}{pic05-comb}
      \label{strat:comb}
    }%
    \subfigure[``Расширяющийся квадрат'']{%
      \label{strat:box}
      \putImgx{0.4\textwidth}{pic05-expand_box}
    }%
    \\
    \subfigure[``Параллельное галсирование'']{%
      \label{strat:tacks}
      \putImgx{0.4\textwidth}{pic05-parallel_tacks}
    }%
  \end{center}
 \caption{Стратегии поиска}
 \label{strat:subfigures}
\end{figure}

Согласно приказу об утверждении правил проведения авиационных поисково-спасательных работ
\cite{napss90}:

``Поиск способом ``Заданный маршрут'' выполняется по линии заданного пути, проходящего вдоль
участка маршрута воздушного судна, потерпевшего бедствие.''

``Способ ``Гребенка'' заключается в одновременном обследовании района поиска группой воздушных судов
путем совместного полета по параллельным прямолинейным маршрутам на интервалах, составляющих
примерно 75\% визуальной видимости или дальности действия поисковой аппаратуры.''

``Поиск [способом ``Расширяющийся квадрат''] состоит в обследовании одиночным воздушным судном
района вокруг известной точки, в которой предполагается нахождение потерпевшего бедствия экипажа.''

``Поиск способом ``Параллельное галсирование'' применяется при недостаточном количестве имеющихся
поисково-спасательных воздушных судов и для обследования значительной площади. ... При этом способе
район поиска разделен на несколько участков поиска(полос), которые просматриваются одновременно
несколькими одиночными воздушными судами или последовательно одним воздушным судном. ... Расстояние
между галсами устанавливается таким же, как и интервал между воздушными судами при поиске способом
``Гребенка''. Для сокращения количества разворотов прямолинейные участки галсов целесообразно
 ориентировать вдоль полос обследования.'' Cледует отметить, что для разных местностей
 рекомендуется разное расстояние между галсами.


В данной работе будет рассмотрено построение маршрута поиска одиночным самолетом согласно
стратегии ``Параллельное галсирование''.

\FloatBarrier
\subsection{Формулировка задачи построения маршрута поиска стратегией
``Параллельное галсирование''}
\begin{figure}
  \putImgx{\textwidth}{pic06-lh}
  \caption{Параметры ``параллельного галсирования''}
  \label{tacks-lh}
\end{figure}

Задано распределение частиц $f(dS, t, path)$; $t_{search}$ --- время поиска;
параметры средства поиска: $pos_0$ --- начальная позиция, $r$ --- радиус обнаружения и 
$v_{max}$ --- максимальная скорость передвижения; параметры стратегии поиска: $l$ --- прямая
параллельная направлению галсов(полосе обследования).
 Необходимо найти маршрут $path(t)$, определяющий
позицию средства поиска в любой момент времени и максимизирующий сумму весов собранных
частиц $sum_{res}$. $path(t)$ должен состоять из прямолинейных отрезков, удовлетворяющих
стратегии поиска ``параллельное галсирование'' с галсами параллельными прямой $l$.
$path(t)$ должен быть задан количеством галсов $n$, а также последовательностями чисел
$l_i, i \in 1..n$ --- величина проекции на прямую $l$(может быть отрицательной),
$h_i, i \in 1..(n-1)$ --- расстояние между галсами с номерами $i$ и $i+1$. (рис. \ref{tacks-lh})
$\sum\limits_{i=1}^{n-1} (|l_i|+h_i) + |l_n| <= v_{max} \cdot t_{search}$. Средство поиска 
перемещается по пути со скоростью $v_{max}$.
Более формально $sum_{res}=1-\int\limits_Sf(dS, t_{search}, path)$, $path(0)=pos_0$,
$|path'(t)| = v_{max}$, собраны те и только те частицы
$\pi$ для которых $\exists \tau\le t_{search} ||pos(\pi, \tau)-path(\tau)|| \le r$. 

\FloatBarrier
\section{Задача симуляции прохождения маршрута}
Для визуализации распределений использована аналогия с температурой: наиболее вероятные
участки обнаружения противника отображаются белым цветом(наиболее горячие), менее вероятные красным,
самые маловероятные синим(риc. \ref{visual-example}).
Промежуточные состояния изображены градиентом между этими цветами.

\drawfigurex{pic08-1}{Пример визуализации}{visual-example}{0.5\textwidth}

Инструмент, проводящий симуляцию изменения распределения вероятности в условиях сбора ее средством
поиска, помимо визуализации должен предоставлять статистические данные для возможности его
использования в алгоритмах оптимизирующих параметры маршрутов поиска. Размеры данных, которые 
должны быть обработаны в реальном времени оказываются слишком велики, и использование лишь мощностей
CPU оказывается недостаточным. Поэтому для разработки были задействованы мощности GPU и технология
CUDA. 

Благодаря тому, что большинство моделей изменения распределения можно представить
\textbf{ядром}(Kernel, Convolution Matrix, матрица свертки --- небольшая матрица используемая для 
создания блюра, резкости и тому подобных эффектов, посредством свертки с изображением)
 и фактически производить Image Convolution(свертку изображения) \cite{nov12, gon02} с заданным ядром
 на каждой итерации --- задача хорошо подходит для архитектуры CUDA \cite{ryo08}.
 Более сложные модели удается симулировать посредством нескольких запусков с различными ядрами и
последующей их композицией.

 Более подробно подход для симуляции описан в главе 2.

\FloatBarrier
%%% Local Variables:
%%% mode: latex
%%% TeX-master: t
%%% End:
